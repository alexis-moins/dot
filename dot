#!/usr/bin/env bash
# This script was generated by bashly 1.1.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

dot_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot - dotfiles manager\n"
    echo

  else
    printf "dot - dotfiles manager\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot COMMAND\n"
  printf "  dot [COMMAND] --help | -h\n"
  printf "  dot --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Show help about a command\n" "help     "
  printf "  %s   Create a link to the dot script\n" "link     "
  printf "  %s   Remove the link to the dot script\n" "unlink   "
  printf "  %s   Update dot to the latest version\n" "update   "
  printf "  %s   Show environment information\n" "env      "
  printf "  %s   Show dotfiles directory\n" "dir      "
  echo
  printf "%s\n" "Dotfiles Commands:"
  printf "  %s   Initialize a dotfiles repository or clone one\n" "init     "
  printf "  %s   Edit your dotfiles\n" "edit     "
  printf "  %s   Install dotfiles using symbolic links\n" "install  "
  printf "  %s   Remove symbolic links from ${HOME}\n" "uninstall"
  printf "  %s   List files from your dotfiles\n" "list     "
  printf "  %s   Filter files from your dotfiles\n" "filter   "
  printf "  %s   Navigate to your dotfiles in a new shell\n" "cd       "
  printf "  %s   Add files to your dotfiles\n" "add      "
  echo
  printf "%s\n" "Git Commands:"
  printf "  %s   Update your dotfiles\n" "sync     "
  printf "  %s   Show the status of your dotfiles\n" "status   "
  printf "  %s   Stage files\n" "stage    "
  printf "  %s   Unstage files\n" "unstage  "
  printf "  %s   Restore unstaged files (undo changes)\n" "restore  "
  printf "  %s   Show diff with last commit\n" "diff     "
  printf "  %s   Show interactive diff with last commit\n" "idiff    "
  printf "  %s   Commit changes\n" "commit   "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    printf "%s\n" "Environment Variables:"

    printf "  %s\n" "EDITOR"
    printf "    Editor used for interactive commands\n"
    printf "    Default: vim\n"
    echo

    printf "  %s\n" "DOT_INSTALL_DIR"
    printf "    Directory where the repository was cloned\n"
    printf "    Default: ${HOME}/.dot\n"
    echo

    printf "  %s\n" "DOTFILES_DIR"
    printf "    Directory containing your dotfiles\n"
    printf "    Default: ${HOME}/dotfiles\n"
    echo

  fi
}

dot_help_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot help - Show help about a command\n"
    echo

  else
    printf "dot help - Show help about a command\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot help [COMMAND]\n"
  printf "  dot help --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "COMMAND"
    printf "    Help subject\n"
    echo

  fi
}

dot_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot init - Initialize a dotfiles repository or clone one\n"
    echo

  else
    printf "dot init - Initialize a dotfiles repository or clone one\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot init [REPOSITORY] [OPTIONS]\n"
  printf "  dot init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--force, -f"
    printf "    Overwrite existing recipe book\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "REPOSITORY"
    printf "    Remote repository url\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot init\n"
    printf "  dot init git@github.com:<username>/dotfiles.git\n"
    echo

  fi
}

dot_link_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot link - Create a link to the dot script\n"
    echo

  else
    printf "dot link - Create a link to the dot script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot link [PATH] [OPTIONS]\n"
  printf "  dot link --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--copy, -c"
    printf "    Copy the script instead of creating a symbolic link\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot link -c\n"
    printf "  dot link /usr/bin\n"
    echo

  fi
}

dot_unlink_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot unlink - Remove the link to the dot script\n"
    echo

  else
    printf "dot unlink - Remove the link to the dot script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot unlink [PATH]\n"
  printf "  dot unlink --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot unlink\n"
    echo

  fi
}

dot_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot update - Update dot to the latest version\n"
    echo

  else
    printf "dot update - Update dot to the latest version\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot update\n"
  printf "  dot update --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot update\n"
    echo

  fi
}

dot_env_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot env - Show environment information\n"
    echo

  else
    printf "dot env - Show environment information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot env [VARIABLE]\n"
  printf "  dot env --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "VARIABLE"
    printf "    Name of the environment variable to show\n"
    printf "    Allowed: DOT_INSTALL_DIR, DOTFILES_DIR\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot env\n"
    echo

  fi
}

dot_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot edit - Edit your dotfiles\n"
    echo

  else
    printf "dot edit - Edit your dotfiles\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot edit [FILE]\n"
  printf "  dot edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "FILE"
    printf "    File to edit (relative to \$DOTFILES_DIR)\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot edit\n"
    echo

  fi
}

dot_sync_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot sync - Update your dotfiles\n"
    echo

  else
    printf "dot sync - Update your dotfiles\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot sync\n"
  printf "  dot sync --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot sync\n"
    echo

  fi
}

dot_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot install - Install dotfiles using symbolic links\n"
    echo

  else
    printf "dot install - Install dotfiles using symbolic links\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot install\n"
  printf "  dot install --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot install\n"
    echo

  fi
}

dot_uninstall_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot uninstall - Remove symbolic links from ${HOME}\n"
    echo

  else
    printf "dot uninstall - Remove symbolic links from ${HOME}\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot uninstall\n"
  printf "  dot uninstall --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot uninstall\n"
    echo

  fi
}

dot_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot status - Show the status of your dotfiles\n"
    echo

  else
    printf "dot status - Show the status of your dotfiles\n"
    echo

  fi

  printf "Alias: st\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dot status [OPTIONS]\n"
  printf "  dot status --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--short, -s"
    printf "    Give the output in a short format\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot status\n"
    echo

  fi
}

dot_dir_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot dir - Show dotfiles directory\n"
    echo

  else
    printf "dot dir - Show dotfiles directory\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot dir\n"
  printf "  dot dir --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot dir\n"
    echo

  fi
}

dot_stage_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot stage - Stage files\n"
    echo

  else
    printf "dot stage - Stage files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot stage [FILES...]\n"
  printf "  dot stage --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to stage (relative to \$DOTFILES_DIR)\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot stage\n"
    echo

  fi
}

dot_unstage_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot unstage - Unstage files\n"
    echo

  else
    printf "dot unstage - Unstage files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot unstage [FILES...]\n"
  printf "  dot unstage --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to unstage (relative to \$DOTFILES_DIR)\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot unstage\n"
    echo

  fi
}

dot_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot restore - Restore unstaged files (undo changes)\n"
    echo

  else
    printf "dot restore - Restore unstaged files (undo changes)\n"
    echo

  fi

  printf "Alias: rs\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dot restore [FILES...]\n"
  printf "  dot restore --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to restore (relative to \$DOTFILES_DIR)\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot restore\n"
    echo

  fi
}

dot_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot list - List files from your dotfiles\n"
    echo

  else
    printf "dot list - List files from your dotfiles\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dot list\n"
  printf "  dot list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot list\n"
    echo

  fi
}

dot_diff_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot diff - Show diff with last commit\n"
    echo

  else
    printf "dot diff - Show diff with last commit\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot diff [OPTIONS] [FILES...]\n"
  printf "  dot diff --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--staged, -s"
    printf "    Only show diff for staged files\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files to diff (relative to \$DOTFILES_DIR)\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot diff\n"
    printf "  dot diff --staged\n"
    echo

  fi
}

dot_idiff_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot idiff - Show interactive diff with last commit\n"
    echo

  else
    printf "dot idiff - Show interactive diff with last commit\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot idiff [OPTIONS]\n"
  printf "  dot idiff --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--staged, -s"
    printf "    Only show diff for staged files\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot idiff\n"
    printf "  dot idiff --staged\n"
    echo

  fi
}

dot_filter_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot filter - Filter files from your dotfiles\n"
    echo

  else
    printf "dot filter - Filter files from your dotfiles\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot filter\n"
  printf "  dot filter --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot filter\n"
    echo

  fi
}

dot_commit_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot commit - Commit changes\n"
    echo

  else
    printf "dot commit - Commit changes\n"
    echo

  fi

  printf "Alias: ci\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dot commit [MESSAGE]\n"
  printf "  dot commit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "MESSAGE"
    printf "    Commit message\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot commit\n"
    echo

  fi
}

dot_cd_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot cd - Navigate to your dotfiles in a new shell\n"
    echo

  else
    printf "dot cd - Navigate to your dotfiles in a new shell\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot cd\n"
  printf "  dot cd --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  dot cd\n"
    echo

  fi
}

dot_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "dot add - Add files to your dotfiles\n"
    echo

  else
    printf "dot add - Add files to your dotfiles\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dot add FILES...\n"
  printf "  dot add --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    echo "  FILES..."
    printf "    Files\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

filter_dotfiles() {
    run_git ls-files | gum filter --placeholder="Select a file..."
}

filter_dotfiles_directory() {
    if [[ ! -d "${DOTFILES_DIR}" ]]; then
        warn "\$DOTFILES_DIR is not a directory."
        warn "consider using $(yellow_underlined "dot init")."
    fi
}

filter_dotfiles_git() {
    if [[ ! -d "${DOTFILES_DIR}/.git" ]]; then
        warn "\$DOTFILES_DIR is not a git repository."
        warn "consider using $(yellow_underlined "dot init")."
    fi
}

interactive_diff() {
    candidates="$(run_git ls-files -mo --exclude-standard --full-name )"
    [[ -z "${candidates}" ]] && info 'no changes to diff' && return 0

    local files="$(echo "${candidates}" | gum filter --placeholder="Select files to diff" --no-limit)"
    [[ -z "${files}" ]] && return 0

    run_git diff "${files}"
}

interactive_staged_diff() {
    candidates="$(run_git diff --cached --name-only)"
    [[ -z "${candidates}" ]] && info 'no staged changes to diff' && return 0

    local files="$(echo "${candidates}" | gum filter --placeholder="Select files to diff" --no-limit)"
    [[ -z "${files}" ]] && return 0

    run_git diff --staged "${files}"
}

error() {
    echo "$(red "dot:") ${1}"
}

info() {
    echo "$(blue "dot:" ) ${1}"
}

success() {
    echo "$(green "dot:" ) ${1}"
}

warn() {
    echo "$(yellow "dot:") ${1}"
}

run_git() {
    command "${deps[git]}" -C "${DOTFILES_DIR}" ${@}
}

run_stow() {
    command "${deps[stow]}" --dir="${DOTFILES_DIR}" --target="${HOME}" ${@} .
}

dot_help_command() {
  command="${args[command]:-}"
  long_usage=yes

  if [[ -z "$command" ]]; then
    # No command argument, show the global help
    help_function=dot_usage
  else
    # Show the help for the requested command
    help_function="dot_${command}_usage"
  fi

  # Call the help function if it exists
  if [[ $(type -t "$help_function") ]]; then
    "$help_function"
  else
    echo "No help available for this command"
    exit 1
  fi

}

dot_init_command() {
  local force="${args[--force]}"
  local repository="${args[repository]}"

  if [[ -d "${DOTFILES_DIR}" ]] && [[ -z "${force}" ]]; then
      if [[ -z "${force}" ]]; then
          error "\$DOTFILES_DIR is not empty."
          exit 1
      else
          command rm -rf "${DOTFILES_DIR}"
      fi
  fi

  if [[ -n "${repository}" ]]; then
      command "${deps[git]}" clone "${repository}" "${DOTFILES_DIR}"
      success "cloned remote dotfiles"
  else
      command mkdir -p "${DOTFILES_DIR}"
      run_git init

      success "initialized empty dotfiles"
  fi

}

dot_link_command() {
  local path="${args[path]}"
  local copy="${args[--copy]}"

  local source="${DOT_INSTALL_DIR}"

  if [[ -f "${path}/dot" ]]; then
      error "there is already a link in ${path}."
      exit 1
  fi

  if [[ ! -d "${source}" ]]; then
      error "source directory ${source} does not exist."
      exit 1
  fi

  if [[ ! -f "${source}/dot" ]]; then
      error "script 'dot' not found in ${source}."
      exit 1
  fi

  local executable=`test -n "${copy}" && echo "cp" || echo "ln -s"`

  command ${executable} "${source}/dot" "${path}/dot"
  success "link created in ${path}."

}

dot_unlink_command() {
  local path="${args[path]}"

  if [[ -f "${path}/dot" ]]; then
      command rm "${path}/dot"

      success "link removed from ${path}."
  else
      error "no link found in ${path}."
      exit 1
  fi

}

dot_update_command() {
  if [[ ! -d "${DOT_INSTALL_DIR}" ]]; then
      warn "no dot install directory."
      warn "check documentation for installation instruction."
      exit 1
  fi

  git -C "${DOT_INSTALL_DIR}" pull

}

dot_env_command() {
  local variable="${args[variable]}"

  if [[ -n "${variable}" ]]; then
      echo "${!variable}"
  else
      echo "DOT_INSTALL_DIR=${DOT_INSTALL_DIR}"
      echo "DOTFILES_DIR=${DOTFILES_DIR}"
  fi

}

dot_edit_command() {
  local file="${args[file]}"

  if [[ -n "${file}" ]]; then
      command $EDITOR "${DOTFILES_DIR}/${file}"
  else
      local file="$(run_git ls-files --others --cached --modified | gum filter --placeholder="Select a file")"

      [[ -n "${file}" ]] && $EDITOR "${DOTFILES_DIR}/${file}"
  fi

}

dot_sync_command() {
  run_git pull --rebase && run_git push

}

dot_install_command() {
  run_stow --delete && run_stow --stow --verbose

}

dot_uninstall_command() {
  run_stow --delete --verbose

}

dot_status_command() {
  local short="${args[--short]}"

  if [[ -n "${short}" ]]; then
      run_git status --short
  else
      run_git status
  fi

}

dot_dir_command() {
  echo "${DOTFILES_DIR}"

}

dot_stage_command() {
  if [[ -n "${other_args[*]}" ]]; then
      run_git add ${other_args[*]} && success "staged ${other_args[*]}"
  else
      candidates="$(run_git ls-files -mo --exclude-standard --full-name)"

      [[ -z "${candidates}" ]] && info "no changes to stage" && exit 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Select files to stage" )"

      [[ -z "${files}" ]] && exit 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git add ${files} \
          && success "staged ${files}"
  fi

}

dot_unstage_command() {
  if [[ -n "${other_args[*]}" ]]; then
      run_git restore --staged ${other_args[*]} && success "unstaged ${other_args[*]}"
  else
      candidates="$(run_git diff --cached --name-only)"

      [[ -z "${candidates}" ]] && info "no changes to unstage" && return 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Select files to unstage" )"

      [[ -z "${files}" ]] && return 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git restore --staged ${files} \
          && success "unstaged ${files}"
  fi

}

dot_restore_command() {
  if [[ -n "${other_args[*]}" ]]; then
      run_git restore ${other_args[*]} && success "restored ${other_args[*]}"
  else
      candidates="$(run_git ls-files -mo --exclude-standard --full-name)"

      [[ -z "${candidates}" ]] && info "no changes to restore" && exit 0

      local files="$(echo "${candidates}" \
          | tr ' ' '\n' \
          | gum filter --no-limit --fuzzy --placeholder="Files to restore...")"

      [[ -z "${files}" ]] && exit 0

      files="$(echo "${files}" | tr '\n' ' ')"

      run_git restore ${files} && success "restored ${files}"
  fi

}

dot_list_command() {
  run_git ls-files --others --cached --modified

}

dot_diff_command() {
  local files="${other_args[*]}"
  local staged="${args[--staged]}"

  if [[ -n "${files}" ]]; then
      if [[ -n "${staged}" ]]; then
          run_git diff --staged ${files}
      else
          run_git diff ${files}
      fi
  else
      if [[ -z "${staged}" ]]; then
          run_git diff
      else
          run_git diff --staged
      fi
  fi

}

dot_idiff_command() {
  local staged="${args[--staged]}"

  if [[ -n "${staged}" ]]; then
      interactive_staged_diff
  else
      interactive_diff
  fi

}

dot_filter_command() {
  filter_dotfiles

}

dot_commit_command() {
  local message="${args[message]}"

  if [[ -n "${message}" ]]; then
      "${deps[git]}" -C "${DOTFILES_DIR}" commit -m "${message}"
  else
      run_git commit
  fi

}

dot_cd_command() {
  command cd "${DOTFILES_DIR}" && command "${SHELL}"

}

dot_add_command() {
  local pattern="${HOME}/"

  for file_path in ${other_args[*]}; do
      # Make file_path absolute and follow symlinks
      file_path="$(realpath "${file_path}")"

      local relative_path="${file_path/${pattern}/}"
      # echo "relative_path: ${relative_path}"

      if [[ "${file_path}" = ${DOTFILES_DIR}/* ]]; then
          error "${relative_path/dotfiles\//} is already in your dotfiles"
          continue
      fi

      if [[ ! -e "${file_path}" ]]; then
          error "${relative_path} not found"
          continue
      fi

      local path_in_dotfiles="${DOTFILES_DIR}/${relative_path}"
      # echo "path_in_dotfiles: ${path_in_dotfiles}"

      if [[ -e "${path_in_dotfiles}" ]]; then
          error "${relative_path} is already in your dotfiles"
          continue
      fi

      # If it's a directory, attempt to copy it recursively
      if [[ -d "${file_path}" ]]; then
          command cp -R "${file_path}" "${path_in_dotfiles}" \
              && success "${relative_path} added to your dotfiles"
      else
          local directory="$(dirname "${path_in_dotfiles}")"

          # echo "directory: ${directory}"

          [[ ! -d "${directory}" ]] && command mkdir -p "${directory}"

          command cp "${file_path}" "${path_in_dotfiles}" \
              && success "${relative_path} added to your dotfiles"
      fi
  done

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  export EDITOR="${EDITOR:-vim}"
  export DOT_INSTALL_DIR="${DOT_INSTALL_DIR:-${HOME}/.dot}"
  export DOTFILES_DIR="${DOTFILES_DIR:-${HOME}/dotfiles}"

  env_var_names+=("EDITOR")
  env_var_names+=("DOT_INSTALL_DIR")
  env_var_names+=("DOTFILES_DIR")

  if command -v git >/dev/null 2>&1; then
    deps['git']="$(command -v git | head -n1)"
  else
    printf "missing dependency: git\n" >&2
    exit 1
  fi

  if command -v gum >/dev/null 2>&1; then
    deps['gum']="$(command -v gum | head -n1)"
  else
    printf "missing dependency: gum\n" >&2
    exit 1
  fi

  if command -v stow >/dev/null 2>&1; then
    deps['stow']="$(command -v stow | head -n1)"
  else
    printf "missing dependency: stow\n" >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    help)
      action="help"
      shift
      dot_help_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      dot_init_parse_requirements "$@"
      shift $#
      ;;

    link)
      action="link"
      shift
      dot_link_parse_requirements "$@"
      shift $#
      ;;

    unlink)
      action="unlink"
      shift
      dot_unlink_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      dot_update_parse_requirements "$@"
      shift $#
      ;;

    env)
      action="env"
      shift
      dot_env_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      dot_edit_parse_requirements "$@"
      shift $#
      ;;

    sync)
      action="sync"
      shift
      dot_sync_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      dot_install_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      dot_uninstall_parse_requirements "$@"
      shift $#
      ;;

    status | st)
      action="status"
      shift
      dot_status_parse_requirements "$@"
      shift $#
      ;;

    dir)
      action="dir"
      shift
      dot_dir_parse_requirements "$@"
      shift $#
      ;;

    stage)
      action="stage"
      shift
      dot_stage_parse_requirements "$@"
      shift $#
      ;;

    unstage)
      action="unstage"
      shift
      dot_unstage_parse_requirements "$@"
      shift $#
      ;;

    restore | rs)
      action="restore"
      shift
      dot_restore_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      dot_list_parse_requirements "$@"
      shift $#
      ;;

    diff)
      action="diff"
      shift
      dot_diff_parse_requirements "$@"
      shift $#
      ;;

    idiff)
      action="idiff"
      shift
      dot_idiff_parse_requirements "$@"
      shift $#
      ;;

    filter)
      action="filter"
      shift
      dot_filter_parse_requirements "$@"
      shift $#
      ;;

    commit | ci)
      action="commit"
      shift
      dot_commit_parse_requirements "$@"
      shift $#
      ;;

    cd)
      action="cd"
      shift
      dot_cd_parse_requirements "$@"
      shift $#
      ;;

    add)
      action="add"
      shift
      dot_add_parse_requirements "$@"
      shift $#
      ;;

    "")
      dot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

dot_help_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_help_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="help"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

dot_init_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="init"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --force | -f)

        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['repository']+x} ]]; then
          args['repository']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

dot_link_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_link_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="link"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --copy | -c)

        args['--copy']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

dot_unlink_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_unlink_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="unlink"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

dot_update_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="update"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

dot_env_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_env_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="env"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['variable']+x} ]]; then
          args['variable']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -n ${args['variable']:-} ]] && [[ ! ${args['variable']:-} =~ ^(DOT_INSTALL_DIR|DOTFILES_DIR)$ ]]; then
    printf "%s\n" "variable must be one of: DOT_INSTALL_DIR, DOTFILES_DIR" >&2
    exit 1
  fi

}

dot_edit_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="edit"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['file']+x} ]]; then
          args['file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_sync_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="sync"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_install_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="install"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_uninstall_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="uninstall"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_status_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="status"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --short | -s)

        args['--short']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_dir_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_dir_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="dir"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

dot_stage_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_stage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="stage"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)

        other_args+=("$1")
        shift

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_unstage_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_unstage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="unstage"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)

        other_args+=("$1")
        shift

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_restore_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="restore"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)

        other_args+=("$1")
        shift

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_diff_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_diff_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="diff"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --staged | -s)

        args['--staged']=1
        shift
        ;;

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)

        other_args+=("$1")
        shift

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_idiff_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_idiff_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="idiff"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --staged | -s)

        args['--staged']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_filter_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_filter_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="filter"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_commit_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_commit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="commit"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['message']+x} ]]; then
          args['message']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_cd_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_cd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="cd"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_dotfiles_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

  filter_error=$(filter_dotfiles_git)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

dot_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dot_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)

        other_args+=("$1")
        shift

        ;;

    esac
  done

  if [[ ${#other_args[@]} -eq 0 ]]; then
    printf "missing required argument: FILES...\nusage: dot add FILES...\n" >&2
    exit 1
  fi

}

initialize() {
  version="1.2.0"
  long_usage=''
  set -e

  export EDITOR="${EDITOR:-vim}"
  export DOT_INSTALL_DIR="${DOT_INSTALL_DIR:-${HOME}/.dot}"
  export DOTFILES_DIR="${DOTFILES_DIR:-${HOME}/dotfiles}"

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "help") dot_help_command ;;
    "init") dot_init_command ;;
    "link") dot_link_command ;;
    "unlink") dot_unlink_command ;;
    "update") dot_update_command ;;
    "env") dot_env_command ;;
    "edit") dot_edit_command ;;
    "sync") dot_sync_command ;;
    "install") dot_install_command ;;
    "uninstall") dot_uninstall_command ;;
    "status") dot_status_command ;;
    "dir") dot_dir_command ;;
    "stage") dot_stage_command ;;
    "unstage") dot_unstage_command ;;
    "restore") dot_restore_command ;;
    "list") dot_list_command ;;
    "diff") dot_diff_command ;;
    "idiff") dot_idiff_command ;;
    "filter") dot_filter_command ;;
    "commit") dot_commit_command ;;
    "cd") dot_cd_command ;;
    "add") dot_add_command ;;
  esac
}

initialize
run "$@"
